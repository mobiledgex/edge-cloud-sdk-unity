// Define Modules for Doxygen Parsing

// Add Information to index.html (main landing page)
/*!
 * \mainpage Main Page
 * The MobiledgeX Client Library enables an application to register and then locate the nearest edge cloudlet backend server for use. 
 *
 * The client library also allows verification of a device's location for all location-specific tasks. Because these APIs involve networking, most functions will run asynchronously.
 *
 *
 * -  Check the \link getting_started GettingStarted \endlink page For information about: 
 *   - \link prerequisites SDK prerequisites \endlink
 *   - \link import_sdk How to Import MobiledgeX Unity SDK  \endlink
 *   - \link setup How to Setup SDK  \endlink
 *   - \link known_issues Known Issues  \endlink
 *   - \link platform_specific Platform Specific Issues \endlink
 *
 * -  Check the \link example_usage Example Usage \endlink page For information about: 
 *   - \link edge_url Getting your closet Edge Server Url \endlink
 *   - \link rest_connection How to Communicate with your Edge Server using REST \endlink
 *   - \link websocket_connection How to Communicate with your Edge Server using WebSockets  \endlink
 *   - \link udp_connection How to Communicate with your Edge Server using UDP  \endlink
 * 
 * - To Navigate the Unity SDK classes please use the tree view, or you use the search bar for searching for a specific function or class
 * 
 * The Unity MobiledgeX SDK comes with a MatchingEngineSDKRestLibrary.dll, Please find full documentation of MatchingEngine here <BR> https://api.mobiledgex.net/swagger/mexdemo/edge-cloud-sdk-csharp/html/index.html 
 * \page getting_started Getting Started
 * \section prerequisites Prerequisites 
 * + Unity 2019.2 or newer, along with selected platforms (iOS, Android) for your project
 * + The SDK is compatible with (IL2CPP & .NET 2.0) , (IL2CPP & .NET 4.x) , (Mono & .NET 2.0) **but not compatible with (Mono  & .NET 4.x)**
 * + A running AppInst deployed on your edge server
 * + Git installed
 * 
 * \section import_sdk Import MobiledgeX Unity SDK
 * 
 * The fastest way to import the MobiledgeX Unity SDK into your project is by using Unity Package Manager. 
 * 
 * You can open it from *Window > Package Manager* in Unity.
 *
 * To add MobiledgeX Package, select the **+** icon and click on **“Add package from git URL…”** 
 *
 *![](https://developers.mobiledgex.com/assets/unity-sdk/add-git-url.png)
 *
 * Enter [https://github.com/mobiledgex/edge-cloud-sdk-unity.git](https://github.com/mobiledgex/edge-cloud-sdk-unity.git) in the text field, which will automatically start the process of importing the package into your application. 
 * 
 * 
 * \section setup Setup
 *
 * Once you have successfully imported the Unity package, you will see a new tab as part of the Unity menu labeled **MobiledgeX**
 * 
 * ![](https://developers.mobiledgex.com/assets/unity-sdk/mobiledgex-menu.png)
 * 
 * Click **Setup**, which will open a new Unity window asking you for your application's
 * * organization name
 * * app name
 * * app version number 
 * 
 * ![](https://developers.mobiledgex.com/assets/unity-sdk/mobiledgex-unity-window.png)
 * 
 * After you provide your application credentials, click the setup button, which will communicate with the DME to verify that your application definition exists on the MobiledgeX console. If successful, your project will be set up with the correct plugins and resources necessary to use our APIs. You can verify if these files were generated correctly by looking in the Plugins and Resources folders of your project. 
 * 
 * ![](https://developers.mobiledgex.com/assets/unity-sdk/generated-plugins.png)
 * 
 * ![](https://developers.mobiledgex.com/assets/unity-sdk/generated-resources.png)
 * 
 * ![](https://developers.mobiledgex.com/assets/unity-sdk/mobiledgex-settings.png)
 * 
 * **Important**: Make sure your Resources/MobiledgeXSettings.asset file has the correct information for your application. 
 * 
 * \section platform_specific Platform Specific
 *
 * ### Android
 * 
 * The minimum API we support for Android is API Version 24. In your player settings, make sure to set the minimum API to 24, otherwise you will be unable to build your project. 
 * 
 * ![](https://developers.mobiledgex.com/assets/unity-sdk/android_version_error.png)
 * 
 * \section known_issues Known Issues 
 * 
 * If you recieve the following error and cannot compile your Unity project, restart Unity.
 * 
 * ![](https://developers.mobiledgex.com/assets/unity-sdk/metadata_error.png)
 * 
 * 
 * \page example_usage Example Usage
 * Once that setup has been completed, you can very easily call all the necessary API requests to connect to a cloudlet with your application deployed. Here is some example code using the MobiledgeXIntegration class that comes with the package 
 * 
 * \section edge_url Getting Edge Connection Url
 *
 * 
 * MobiledgeX SDK uses the device Location and [the device's MCC-MNC ID (if avaliable)](https://developers.mobiledgex.com/getting-started/connecting-client-app#distributed-matching-engine) to connect you to the closest Edge cloudlet where you application instance is deployed.
 * 
 * If your carrier is not supported yet by MobiledgeX the SDK will throw a DmeDnsException. You can catch this exception and instead use WifiOnly(true) to connect to [the wifi dme](https://developers.mobiledgex.com/getting-started/connecting-client-app#distributed-matching-engine) which will connect you to the closest [regional DME](https://developers.mobiledgex.com/getting-started/connecting-client-app#distributed-matching-engine).
 * 
 * ```csharp
 * using MobiledgeX;
 * using DistributedMatchEngine;
 * using UnityEngine;
 * using System.Collections;
 * 
 * [RequireComponent(typeof(MobiledgeX.LocationService))]
 * public class YourClassName : MonoBehaviour
 * { 
 *     IEnumerator Start()
 *     {
 *         yield return StartCoroutine(MobiledgeX.LocationService.EnsureLocation()); // Location is needed to connect you to the closet edge
 *         GetEdgeConnection();
 *     }
 *      async void GetEdgeConnection()
 *     {
 *         MobiledgeXIntegration mxi = new MobiledgeXIntegration();
 *         try
 *         {
 *             await mxi.RegisterAndFindCloudlet();
 *         }
 *         catch(DmeDnsException)
 *         {
 *             mxi.UseWifiOnly(true); // if you carrier is not supported yet, WifiOnly will connect you to wifi.dme 
 *             await mxi.RegisterAndFindCloudlet();
 *         }
 * 
 *         mxi.GetAppPort(LProto.L_PROTO_HTTP); // Get the port of the desired protocol
 *         string url = mxi.GetUrl("http"); // Get the url of the desired protocol
 *     }
 *     
 * }
 * ```
 * 
 * If your device doesn't have MCC-MNC ID (no sim card - for ex. Oculus device), Please use UseWifiOnly before RegisterAndFindCloudlet.
 * 
 * ```csharp
 * use mxi.UseWifiOnly(true); 
 * await mxi.RegisterAndFindCloudlet();
 * ```
 * 
 * 
 * 
 * 
 * 
 * **In UnityEditor** 
 * 
 * While developing in Unity Editor (Location is not used), The fallback location by default is San Jose, CA.
 * 
 * If you wish to change the fallback Location, use SetFallbackLocation() before you call RegisterAndFindCloudlet().
 * 
 * ```csharp
 *  mxi.SetFallbackLocation(testLongtiude, testLatitude); 
 *  await mxi.RegisterAndFindCloudlet();
 * ```
 * 
 * By default in Unity Editor you will connect with the Wifi DME, which is specified using the TestCarrierInfoClass in the CarrierInfoIntegration script.
 * 
 * 
 * 
 * \section rest_connection REST Example
 * 
 * 
 * 
 * For full example code, Please check [RunTime/Scripts/ExampleRest.cs](https://github.com/mobiledgex/edge-cloud-sdk-unity/blob/master/Runtime/Scripts/ExampleRest.cs)
 * 
 * ```csharp
 *  async void GetEdgeConnection()
 *     {
 *         MobiledgeXIntegration mxi = new MobiledgeXIntegration();
 *         await mxi.RegisterAndFindCloudlet();
 *         
 *         mxi.GetAppPort(LProto.L_PROTO_HTTP); // Get the port of the desired protocol
 *         string url = mxi.GetUrl("http"); // Get the url of the desired protocol
 *         StartCoroutine(RestExample(url)); // using UnityWebRequest
 *         RestExampleHttpClient(url); // using HttpClient
 *         
 *     }
 *  // using UnityWebRequest
 *  IEnumerator RestExample(string url)
 *     {
 *         UnityWebRequest www = UnityWebRequest.Get(url);
 *         yield return www.SendWebRequest();
 * 
 *         if (www.isHttpError || www.isNetworkError)
 *         {
 *             Debug.Log(www.error);
 *         }
 *         else
 *         {
 *             // Show results as text
 *             Debug.Log(www.downloadHandler.text);
 * 
 *             // Or retrieve results as binary data
 *             byte[] results = www.downloadHandler.data;
 *         }
 *     }
 *     
 *     // using HttpClient
 *     async Task<HttpResponseMessage> RestExampleHttpClient(string url)
 *     {
 *         HttpClient httpClient = new HttpClient();
 *         httpClient.BaseAddress = new Uri(url);
 *         return await httpClient.GetAsync("?q=x"); //makes a get request, "?q=x" is a parameter example 
 *     }
 *     
 * ```
 * 
 * 
 * 
 *  \section websocket_connection WebSockets Example
 *
 *
 * MobiledgeX Unity Package comes with  WebSocket Implementation (MobiledgeXWebSocketClient).
 *  
 *  For Using MobiledgeXWebSocketClient:
 *  1. Start the WebSocket
 *  2. Handle received messages from your Edge server.
 *  3. Send messages. (Text or Binary)
 *  
 *  For full example code, Please check [RunTime/Scripts/ExampleWebSocket.cs](https://github.com/mobiledgex/edge-cloud-sdk-unity/blob/master/Runtime/Scripts/ExampleWebSocket.cs)
 *  
 *  
 *  
 * ```csharp
 *      async void GetEdgeConnection()
 *         {
 *             mxi = new MobiledgeXIntegration();
 *             await mxi.RegisterAndFindCloudlet();
 *             mxi.GetAppPort(LProto.L_PROTO_TCP);
 *             string url = mxi.GetUrl("ws");
 *             await StartWebSocket(url);
 *             wsClient.Send("WebSocketMsg");// You can send  Text or Binary messages to the WebSocket Server 
 *         }
 *         
 *      async Task StartWebSocket(string url)
 *         {
 *             wsClient = new MobiledgeXWebSocketClient();
 *             if (wsClient.isOpen())
 *             {
 *                 wsClient.Dispose();
 *                 wsClient = new MobiledgeXWebSocketClient();
 *             }
 * 
 *             Uri uri = new Uri(url);
 *             await wsClient.Connect(uri);
 *         }
 *      
 *      // Handle received messages from your Edge server
 *      // Using MonoBehaviour callback Update to dequeue Received WebSocket Messages every frame (if there is any)
 *      private void Update()
 *      {
 *          if (wsClient == null)
 *          {
 *              return;
 *          }
 *          var cqueue = wsClient.receiveQueue;
 *          string msg;
 *          while (cqueue.TryPeek(out msg))
 *          {
 *              cqueue.TryDequeue(out msg);
 *              Debug.Log("WebSocket Received messgae : " + msg);
 *          }
 *      }
 *  ```
 * \section udp_connection UDP Example
 *
 * MobiledgeX Unity Package comes with  UDP Client Implementation (MobiledgeXUDPClient).
 *
 * For Using MobiledgeXUDPClient :
 * 1. Start the UDP Connection
 * 2. Handle received messages from your Edge server.
 * 3. Send messages. (Text or Binary)
 *
 * For full example code, Please check [RunTime/Scripts/ExampleUDP.cs](https://github.com/mobiledgex/edge-cloud-sdk-unity/blob/master/Runtime/Scripts/ExampleUDP.cs)
 *
 *
 *
 * ```csharp
 *     async void GetEdgeConnection()
 *        {
 *            mxi = new MobiledgeXIntegration();
 *            await mxi.RegisterAndFindCloudlet();
 *            // udpSendPort is the udp port exposed on your EdgeServer
 *            int udpSendPort = mxi.GetAppPort(LProto.L_PROTO_UDP).public_port;
 *            int udpReceivePort = 5000; //You can define the receive port
 *            udpHost = mxi.GetHost();
 *            SendUDPMessage("Hi, From client to server", udpHost, udpSendPort, udpReceivePort);
 *        }
 *        
 *     void SendUDPMessage(string message, string udpHost, int udpSendPort, int udpReceivePort)
 *        {
 *            udpClient = new MobiledgeXUDPClient(udpHost, udpSendPort, udpReceivePort);
 *            udpClient.Connect();
 *            udpClient.Send(message);
 *                
 *            //You can send binary also
 *            //byte[] messageBinary = Encoding.ASCII.GetBytes(message);
 *            //udpClient.Send(messageBinary);
 *        }
 *     
 *     // Handle received messages from your Edge server
 *     // Using MonoBehaviour callback Update to dequeue Received UDP Messages every frame (if there is any)
 *     void Update()
 *         {
 *             if (udpClient == null)
 *             {
 *                 return;
 *             }
 *             //udp receive queue
 *             byte[] udpMsg;
 *             var udp_queue = udpClient.receiveQueue;
 *             while (udp_queue.TryPeek(out udpMsg))
 *             {
 *                 udp_queue.TryDequeue(out udpMsg);
 *                 string udpReceivedMsg = Encoding.UTF8.GetString(udpMsg);
 *                 print("Received UDP Message : " + udpReceivedMsg);
 *             }
 *         }
 * ```
 *
 */
